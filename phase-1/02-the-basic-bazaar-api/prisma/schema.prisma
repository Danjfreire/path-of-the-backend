// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String  
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  products  Product[]
  orders    Order[]
}

enum ProductCategory {
  BOOKS
  CLOTHING
  ELECTRONICS
  FASHION
  HOME
  BEAUTY
  SPORTS
  OTHER
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  category    ProductCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isAvailable Boolean  @default(true)
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id])
  deletedAt   DateTime? 
  orderItem   OrderItem?
}

model OrderItem {
  id            String @id @default(uuid())
  orderId       String
  order         Order @relation(fields: [orderId], references: [id])
  productId     String @unique
  product       Product @relation(fields: [productId], references: [id])
  purchasePrice Float
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String @id @default(uuid())
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      OrderStatus @default(PENDING)
  totalPrice  Float
}

model IdempotencyRequest {
  key         String @id
  userId      String
  createdAt   DateTime @default(now())
  response    Json
}
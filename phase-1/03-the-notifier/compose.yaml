services:
  db-core:
    image: "postgres:17.4-alpine3.21"
    ports:
      - "5432:5432"
    env_file:
      - .env.core.development
    volumes:
      - core_pg_data:/var/lib/postgresql/data
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20

  db-notification:
    image: "postgres:17.4-alpine3.21"
    ports:
      - "5433:5432"
    env_file:
      - .env.notification.development
    volumes:
      - notification_pg_data:/var/lib/postgresql/data
    networks:
      - notification-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20

  db-test:
    image: "postgres:17.4-alpine3.21"
    ports:
      - "5432:5432"
    env_file:
      - .env.test
    networks:
      - notification-network
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20

  core-api:
    build:
      context: ./core-api
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./core-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    env_file:
      - .env.core.development
    ports:
      - "3000:3000"
    networks:
      - core-network
    depends_on:
      db-core:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  core-api-test:
    build:
      context: ./core-api
    command: npm run test:watch
    develop:
      watch:
        - action: sync
          path: ./core-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    env_file:
      - .env.test
    networks:
      - core-network
    depends_on:
      db-test:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  notification-api:
    build:
      context: ./notification-api
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./notification-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    env_file:
      - .env.notification.development
    networks:
      - notification-network
    ports:
      - "9000:9000"
    depends_on:
      db-notification:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  notification-api-test:
    build:
      context: ./notification-api
    command: npm run test:watch
    develop:
      watch:
        - action: sync
          path: ./notification-api
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    env_file:
      - .env.test
    networks:
      - notification-network
    ports:
      - "9000:9000"
    depends_on:
      db-test:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  rabbitmq:
    image: "rabbitmq:4.1.0-management-alpine"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - core-network
      - notification-network

volumes:
  core_pg_data:
    name: core_pg_data
  notification_pg_data:
    name: notification_pg_data

networks:
  core-network:
    name: core-network
  notification-network:
    name: notification-network
